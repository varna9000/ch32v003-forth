* forth on ch32v003

a simple multitask forth on ch32v003

[[DOCS.org][Documents]] auto-generated from the assembly code. It's quite hard to do anything with this Forth if you don't know what the words do.

* build

#+BEGIN_SRC shell
make
#+END_SRC

* connect & download

#+BEGIN_SRC text
  [          ] PD1(SWIO) <------------> SWIO [          ]
  [ CH32V003 ] VSS       <------------> GND  [ WCH LINK ]
  [          ] VDD       <------------> 3V3  [          ]
	PD6 <-----------------------------> UART TX & RX   
#+END_SRC

use this software download it into mcu:

https://www.wch.cn/downloads/WCH-LinkUtility_ZIP.html

* connect

PD6 provide half-duplex one wire UART

*Edit*: For some reason the 1 wire half-duplex UART works on my board _only_ right after flashing. If I reboot, the UART is not responsive at all.
I guess something is pulled high/low which prevents it from working. I'll have to investigate.

#+BEGIN_SRC
 _____ _____ _____ _____ _____
|   __|     | __  |_   _|  |  |
|   __|  |  |    -| | | |     |
|__|  |_____|__|__| |_| |__|__|

ITC FORTH on CH32V003 (rv32ec)

CHIP UID: FE2AABCD6656BC5FFFFFFFFF

0x1 0x2 + . 00000003

#+END_SRC

baudrate is 921600

* word layout

word header is optimized for ch32v003, please read source code

* define word

#+BEGIN_SRC forth
: star 0x2A emit ;
: stars dup if begin star 1- dup 0= until then drop ;
#+END_SRC

* constant

#+BEGIN_SRC forth
0x41 constant ascii-A
#+END_SRC

* look dict

#+BEGIN_SRC forth
words
#+END_SRC

* reset mcu

#+BEGIN_SRC forth
sysrst
#+END_SRC

* save ram into rom

You can save your environment into rom

#+BEGIN_SRC forth
romunlock rambakerase rompgon rambaksave rompgoff romlock
#+END_SRC

* load ram from rom

You can load your saved environment from rom

only recover data in ram, some data such as mmio register, riscv csr, can't restore

#+BEGIN_SRC forth
rambakload
#+END_SRC

* watchdog

#+BEGIN_SRC forth
dogon
#+END_SRC

You can trig a watchdog reset:

#+BEGIN_SRC forth
: badloop begin false until ;
badloop
#+END_SRC

* systick timer

default systick use for a millis counter

#+BEGIN_SRC forth
  systickon
#+END_SRC

dump ms count low 32bit:

#+BEGIN_SRC forth
mscountl ?
#+END_SRC

dump ms count high 32bit:

#+BEGIN_SRC forth
mscounth ?
#+END_SRC

* multitasking

ch32v003 only have 2KiB SRAM, don't define a lot of task,

please define multi action in one task.

create a dummy task:

#+BEGIN_SRC forth
: dummytask begin yield false until task;
#+END_SRC

create a task display star per 1 sec

#+BEGIN_SRC forth
systickon
: star 0x2A emit ;
: startask begin yield 0x3E8 delayms star false until task;
#+END_SRC


* Examples on Nano ch32v003 dev board
*** Built-in LED is connected to PD1, which is also used for SWIO debug interface. We have to disable debug function of the pin before we can use the LED.

#+BEGIN_SRC forth
  ( set PORT D as push-pull )
  : dportset 0x40021018 @ 0x20 or 0x40021018 ! ;

  ( set clock on PORT D)
  : dclk 0x40011400 @ 0xFFFFFF0F and 0x60 or 0x40011400 ! ;

  ( Disable Debug interface, which is connected to PD1 on this board )
  : swdoff 0x40010004 @ 0x07000000 invert and 0x04000000 or 0x40010004 ! ;

  ( set built-in led on PD1 high )
  : ledon 0x4001140C @ 0xD and 0x4001140C ! ;

  ( set built-in led on PD1 low )
  : ledoff 0x4001140C @ 0x2 or 0x4001140C ! ;

  ( general PD1 init routine )
  : ledinit dportset dclk swdoff ;

  ( blink built-in led on PD1 once )
  : blink systickon ledon 0x3E8 delayms ledoff 0x3E8 delayms systickoff ;

  ( blink built-in LED on PD1 10 times )
  : 10blink 0xA begin 1- blink dup 0= until ;

#+END_SRC

* todo

1. add doc for define a new word in asm file

2. add i2c host driver

* license

mit
